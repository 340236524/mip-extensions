diff --git a/src/mip-infinitescroll/README.md b/src/mip-infinitescroll/README.md
index f5a7c1c..2a31d6d 100644
--- a/src/mip-infinitescroll/README.md
+++ b/src/mip-infinitescroll/README.md
@@ -1,6 +1,6 @@
 # mip-infinitescroll 无限滚动
 
-当用户滚动到页面底部时，加载更多。
+当用户滚动到页面底部时，异步加载更多数据。适用于信息推荐。
 
 标题|内容
 ----|----
@@ -11,12 +11,14 @@
 ## 示例
 
 ### 基本用法
+<!--
 ```html
 <mip-infinitescroll data-src="xxx" template="myTemplate">
     <script type="application/json">
     {
         "rn": 40,
-        "pn": 3,
+        "pn": 1,
+        "prn": 6,
         "pnName": "pn",
         "bufferHeightPx": 40,
         "loadingHtml": "loading",
@@ -42,6 +44,39 @@
 
 </mip-infinitescroll>
 ```
+-->
+
+### 根据返回值判断请求结束
+如果数据量未知，可以填写rn="[Infinity](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity)", 加载完所有数据后才停止请求。
+
+[warning] 由于JSON.parse不能解析Infinity，配置需要写成字符串形式 "Infinity"。
+```html
+<mip-infinitescroll data-src="xxx" template="myTemplate">
+    <script type="application/json">
+    {
+        "rn": "Infinity",
+        "pn": 1,
+        "prn": 6,
+        "bufferHeightPx": 40
+    }
+    </script>
+    <template type="mip-mustache" id="myTemplate">
+        <li>
+            <p>序号{{number}}: {{title}}</p>
+            <mip-img
+                layout="responsive"
+                width="600"
+                height="120"
+                src="{{img}}">
+            </mip-img>
+        </li>
+    </template>
+    <div class="mip-infinitescroll-results"></div>
+    <div class="bg">
+        <div class="mip-infinitescroll-loading"></div>
+    </div>
+</mip-infinitescroll>
+```
 
 ## 属性
 
@@ -67,16 +102,24 @@
 
 ### rn
 
-说明：results number,需要显示的结果总数量     
+说明：results number, 需要显示的结果总数量  
+类型：整数，"[Infinity](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Infinity)"字符串形式  
 必选项：否   
-类型：整数   
-取值范围：无   
+取值范围：如果填写整数n，则只会取n条数据。如果填写"Infinity"，则无限加载数据，直到后端没有数据返回。   
 单位：无   
 默认值：20
 
 ### pn
 
-说明：page number, 每次请求所请求的数据条数       
+说明：page number, 请求第几页  
+必选项：否   
+类型：整数    
+单位：无   
+默认值：1  
+
+### prn
+
+说明：page result number, 每次请求所请求的数据条数       
 必选项：否   
 类型：整数   
 取值范围：无   
@@ -134,14 +177,54 @@
 - 异步请求接口需要规范 callback 为 'callback'
 - 接口返回的数据格式需要是如下格式：
 
-
-    {
-        status: 0, 
-        data: { 
-            items: []
-        }
+```
+{
+    "status": 0, 
+    "data": { 
+        "items": [{}, {}]
     }
-
+}
+```
 - status 0 表示请求成功
 - items: [] 是需要渲染的数据
+- 接口返回数据示例：
+```
+{
+    "status": 0,
+    "data":
+    {
+        "items": [
+        {
+            "title": "风信子",
+            "img": "https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=3495450057,3472067227&fm=5",
+            "number": 1
+        },
+        {
+            "title": "紫罗兰",
+            "img": "https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3903672296,3890938056&fm=5",
+            "number": 2
+        },
+        {
+            "title": "梅花",
+            "img": "https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1564909352,2801480363&fm=5",
+            "number": 3
+        },
+        {
+            "title": "茉莉花",
+            "img": "https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3761083504,3769519560&fm=5",
+            "number": 4
+        },
+        {
+            "title": "栀子花",
+            "img": "https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3554982299,3562031081&fm=5",
+            "number": 5
+        },
+        {
+            "title": "桃花",
+            "img": "https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=2475781023,3185445088&fm=5",
+            "number": 6
+        }]
+    }
+}
+```
 
diff --git a/src/mip-infinitescroll/infinitescroll.js b/src/mip-infinitescroll/infinitescroll.js
index 87877a3..7e0c2cc 100644
--- a/src/mip-infinitescroll/infinitescroll.js
+++ b/src/mip-infinitescroll/infinitescroll.js
@@ -5,6 +5,7 @@
  */
 
 define(function (require) {
+    // 使用了jquery $.Deferred
     var $ = require('jquery');
     var InfiniteScroll = function (opt) {
         if (!opt.$result || !opt.$loading || !opt.pushResult) {
@@ -242,7 +243,7 @@ define(function (require) {
                     // 成功
                     function (newResultArr) {
                         // 处理新增数据
-                        if (newResultArr === 'NULL') {
+                        if (newResultArr == false) {
                             // 标记数据状态为无数据
                             me.dataStatus = 0;
                             me.options.$loading.html(me.options.loadOverHtml);
diff --git a/src/mip-infinitescroll/mip-infinitescroll.js b/src/mip-infinitescroll/mip-infinitescroll.js
index f0f3021..c5a2f6b 100644
--- a/src/mip-infinitescroll/mip-infinitescroll.js
+++ b/src/mip-infinitescroll/mip-infinitescroll.js
@@ -1,6 +1,6 @@
 /**
  * @file mip-infinitescroll 组件
- * @author wangpei07
+ * @author wangpei07, liangjiaying
  */
 
 define(function (require) {
@@ -55,7 +55,8 @@ define(function (require) {
             bufferHeightPx: 10,
             loadingHtml: '加载中...',
             loadFailHtml: '加载失败',
-            loadOverHtml: '加载完毕!'
+            loadOverHtml: '加载完毕!',
+            timeout: 5000
         };
 
         // 获取用户设置参数
@@ -63,6 +64,8 @@ define(function (require) {
             var script = element.querySelector('script[type="application/json"]');
             if (script) {
                 self.params = util.fn.extend(self.params, JSON.parse(script.textContent.toString()));
+                // 由于JSON.parse() 内不能填写Infinity(number), 只能填"Infinity"(string)来转换
+                self.params.rn = (self.params.rn === 'Infinity' ? Infinity : self.params.rn);
             }
         }
         catch (e) {
@@ -73,6 +76,8 @@ define(function (require) {
 
         self.url = getUrl.call(self, src);
 
+
+        // 异步请求返回后，解析数据，使用mustache 渲染插入页面
         self.pushResult = function (rn, status) {
             // 异步获取数据示例
             var defer = $.Deferred();
@@ -82,7 +87,8 @@ define(function (require) {
             }
             else {
                 fetchJsonp(self.url, {
-                    jsonpCallback: 'callback'
+                    jsonpCallback: 'callback',
+                    timeout: self.timeout
                 }).then(function (res) {
                     return res.json();
                 }).then(function (data) {
